#! /usr/bin/env python
# Copyright (C) 2016- The University of Notre Dame This software is distributed
# under the GNU General Public License.  See the file COPYING for details.

import ResourceMonitor as rm
import sys
import csv


def read_input(filename):
  # Create an empty set of categories
  categories = rm.Categories()

  # Read resource report summaries as comma separated values, and add them to
  # the set of categories.
  with open(input_name) as cvsfile:
    reader = csv.DictReader(cvsfile)
    for row in reader:
      categories.accumulate_summary(row)

  return categories

def report_allocations(categories, mode, field):

  for name in categories.category_names():
    # for each category, we compute the first allocation of all the resources:
    fa = categories.first_allocation(mode = mode, category = name)
    ma = categories.maximum_seen(name)

    # print the values found for a particular resource
    first_allocation = fa[field]
    maximum_seen     = ma[field]

    count           = categories.count(name)
    retries         = categories.retries(name, field, first_allocation)
    waste           = categories.wastepercentage(name, field, first_allocation)
    throughput      = categories.throughput(name, field, first_allocation)
    base_throughput = categories.throughput(name, field, maximum_seen)

    print_row(name, first_allocation, maximum_seen, throughput/base_throughput, waste, retries, count)

def print_row(category, allocation, maximum, throughput, waste, retries, count):
  print '%-10s: %5d %5d %6.3lf %6.3lf %6d/%-5d' % (category, allocation, maximum, throughput, waste, retries, count)

def print_header(mode, resource):
  print '\n%s --- mode: %s' % (resource, mode)
  print '%-10s: %5s %5s %6s %6s %6s/%-5s' % ('category', 'alloc', 'max', 'throu', 'waste', 'retry', 'count')


if __name__ == '__main__':

  try:
    input_name = sys.argv[1]
  except IndexError:
    sys.stderr.write('Use: %s name-of-input.csv\n' % (sys.argv[0],))
    sys.stderr.flush()
    sys.exit(1)

  categories = read_input(input_name)

  for mode in ('throughput', 'waste', 'fixed'):
    for resource in ('memory', 'disk', 'cores'):
      print_header(mode, resource)
      report_allocations(categories, mode, resource)

